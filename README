RaspberryPi Application Launcher -- Qt Quick 1.1 Application

Provides a Tabbed Interface to Launch Applications From. 
    Note: Currently this is Limitied to 1 Application 
          at a time -- something to fix already =D

The Applications are arranged on each Tab page in a Grid, and 
    Provide a Title, Icon Image and Description.  The First
    Few Lines of the Description are always visible with the
    lower portion becoming visible after the user clicks on it.

Suggestion: When an Application Fails to Launch Suppress
            Errors and Launch Package Manager for the Given App


Notes about Limitations of the Software in it's Current State:
    1. Can only Run 1 Application before Freezing RaspPiApp
       due to procExec.h only have 1 QProcess Object
    2. Re-Sizing Gets Messed Up. I have to Investigate this, and
       Setting Up the main.qml to Take up All of the Window Size
    3. I'm not happy with the code layout, but QML makes it
       pretty cut and paste to fix that! =D (Sorry, Couldn't Resist!)
    4. Paths to Icons are Hardcoded to Ubuntu 11.10 on x86. Will
       Change to Default Location and Images on Release
    5. Text blurb can and will get cut off if it cannot fit height-wise
    6. Title will Just Bleed Over the Edges if it is Too Long!
    7. Grid is not Centered within the Tab Page
    8.
    9. There's more but I can't think of it


Notes about the Future:
    1. Transitions might need to be removed for performance on
       the actual hardware.
    2. QProcess would need to be implemented or we can use
       rewrite it using basic linux sys calls. QProcess is just
       an abstraction. I'm assuming it will exist since we are
       suppose to get Qt5 for the RaspberryPi.
    3. Investigate about how QProcess assigns arguments since I
       don't pass any as far as their API should be concerned
       however they are still running when called simply because
       they are in the "program name" part of their API. I'm
       thinking it is just a string append and it doesn't matter.
    4. Fix the Code Layout, and Investigate Common/Best Coding
       Practices for that (I'm a newbie at Qt/QML, not C++)
    5. There's more but I can't think of it
